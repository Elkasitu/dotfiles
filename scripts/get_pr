#!/usr/bin/env python

import json
import subprocess
import sys

from urllib.request import urlopen
from urllib.error import HTTPError

API_URL = "https://api.github.com/repos/odoo/odoo/pulls/%d"


def get_pr_info(pr_num):
    # NOTE: only works with community PRs, enterprise (or private repos) need tokens
    try:
        return json.loads(urlopen(API_URL % pr_num).read())
    except HTTPError as e:
        if e.code == 404:
            print(f"PR #{pr_num} doesn't seem to exist")
            sys.exit(4)
        raise e from None


def parse_pr_info(info):
    if not info['maintainer_can_modify']:
        # print("This PR cannot be fetched as the user has chosen not to allow maintainer modifications")
        ...
        # sys.exit(1)
    head = info['head']
    return (head['user']['login'], head['repo']['ssh_url'], head['ref'])


def process_git(name, url, branch):
    if not (name in subprocess.check_output(['git', 'remote'], encoding='utf-8')):
        subprocess.run(['git', 'remote', 'add', name, url])
        print(f"Creating remote {name}")
    else:
        print(f"Remote {name} already exists, it will simply be fetched")
    print(f"Fetching {name}...")
    # FIXME: try to only fetch the proper branch, no need to fetch everything
    subprocess.run(['git', 'fetch', name])
    subprocess.run(['git', 'checkout', branch])


def main():
    if len(sys.argv) < 2:
        print("You must provide a PR number")
        sys.exit(2)

    pr_num = sys.argv[1]
    if not pr_num.isdigit():
        print("The argument must be a number")
        sys.argv(3)
    pr_num = int(pr_num)

    process_git(*parse_pr_info(get_pr_info(pr_num)))


if __name__ == '__main__':
    main()
