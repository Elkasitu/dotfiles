[include]
    path = .gitprivate
[core]
	editor = nvim
	excludesFile = ~/.globalgitconfig
[commit]
    gpgsign = true
	verbose = true
[gpg]
	program = gpg2
[init]
	templatedir = ~/.git_template
[merge]
    tool = fugitive
[mergetool "fugitive"]
    cmd = nvim -f -c "Gdiff" "$MERGED"
[diff]
    tool = vimdiff
[difftool "vimdiff"]
    cmd = nvim -d $LOCAL $REMOTE
[alias]
	co = checkout
	ci = commit
	br = branch
	st = status
	hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
    rebase-pr = "!f() {\
        p=$1 && \
        b=`git symbolic-ref -q --short HEAD` && \
        r=`git config branch.$b.remote`; \
        r=${r:-prod} && \
        git fetch $r pull/$p/head:pr-$p && \
        git fetch -f $r pull/$p/merge:PR_MERGE_HEAD && \
        git rebase --onto $b PR_MERGE_HEAD^ pr-$p && \
        git checkout $b && \
        git merge --quiet --ff-only pr-$p && \
        git branch -D PR_MERGE_HEAD && \
        git branch -D pr-$p && \
        echo && \
        git diff --stat $b..$r/$b && echo && \
        git rebase -i $r/$b;}; f"

    # expected format: git get-br mart-e:patch-42
    # where "mart-e:patch-42" is the source in the description of the PR
    # if the remote is not present, add it
    # fetch the branch and checkout
    get-br = "!f() {\
        remote=`echo $1 | cut -d ":" -f1`; \
        branch=`echo $1 | cut -d ":" -f2`; \
        \
        localbranch=`git symbolic-ref -q --short HEAD`; \
        localremote=`git config branch.$localbranch.remote`; \
        [ -z $localremote ] && { \
            echo "Branch $localbranch is not linked to any remote, can not guess the URL for the remote $remote."; \
            echo "Set a remote or switch to the current branch."; \
            exit; \
        }; \
        \
        localurl=`git config remote.$localremote.url`; \
        \
        remoteurlpresent=`git config remote.$remote.url`; \
        [ -z $remoteurlpresent ] && {  \
            \
            lefturl='git@github.com:'; \
            righturl=`echo $localurl | cut -d "/" -f2`; \
            \
            isssh=`echo $localurl | grep 'git@' | wc -l`; \
            [ $isssh -eq 0 ] && { \
                lefturl='https://github.com/'; \
                righturl=`echo $url | cut -d "/" -f5`; \
            }; \
            \
            newurl="$lefturl$remote/$righturl"; \
            git remote add $remote "$newurl"; \
            \
        }; \
        remotebranchpresent=`git config branch.$branch.remote`; \
        if [ -z $remotebranchpresent ]; then {  \
            git fetch $remote $branch; \
            git branch $branch $remote/$branch; \
        } elif [[ "$remotebranchpresent" != "$remote" ]]; then {  \
            echo "Branch $branch already present localy with a different remote than $remote"; \
            exit;  \
        } fi; \
        git checkout $branch; \
        echo "Switched to $remote/$branch"; \
    }; f"

    # expected format: git rem-br odoo:my-master
    # clean after a git get-br
    rem-br = "!f() {\
        remote=`echo $1 | cut -d ":" -f1`; \
        branch=`echo $1 | cut -d ":" -f2`; \
        current=`git symbolic-ref -q --short HEAD`; \
        [[ "$current" == "$branch" ]] && {  \
            echo "Checkout in a different branch before removing $branch"; \
            exit;  \
        }; \
        git branch -D $branch; \
        git remote remove $remote; \
    }; f"

    # re-generate ctags for the entire repo
	ctags = !.git/hooks/ctags
